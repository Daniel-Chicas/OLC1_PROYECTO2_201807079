/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,13],$V3=[1,11],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[5,7,9,11,24,26,64,65,75,76,77,78,79],$Vd=[1,29],$Ve=[2,91],$Vf=[11,13,28,29],$Vg=[14,25,50],$Vh=[1,39],$Vi=[1,48],$Vj=[1,47],$Vk=[1,45],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,49],$Vp=[1,46],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,60],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,71],$VC=[1,81],$VD=[5,7,9,11,23,24,26,34,36,37,38,44,45,46,52,54,58,60,64,65,75,76,77,78,79],$VE=[1,101],$VF=[1,100],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,88],$VN=[1,89],$VO=[1,96],$VP=[1,97],$VQ=[1,98],$VR=[1,99],$VS=[1,102],$VT=[13,14,23,25,27,28,30,48,49,59,68,69,70,71,81,82,83,84,85,86,98],$VU=[1,121],$VV=[13,25],$VW=[1,131],$VX=[1,178],$VY=[1,182],$VZ=[1,179],$V_=[1,180],$V$=[1,181],$V01=[1,198],$V11=[2,50],$V21=[1,194],$V31=[1,195],$V41=[1,196],$V51=[1,197],$V61=[1,209],$V71=[1,207],$V81=[1,208],$V91=[1,206],$Va1=[1,205],$Vb1=[13,14,23,25,27,28,30,48,49,59,81,82,83,84,85,86,98],$Vc1=[13,14,23,25,27,28,30,48,49,59,68,69,81,82,83,84,85,86,98],$Vd1=[13,14,23,25,30,59,81,82,83,84,98],$Ve1=[13,14,23,25,27,28,30,59,81,82,83,84,85,86,98],$Vf1=[1,236],$Vg1=[1,237],$Vh1=[1,238],$Vi1=[1,239],$Vj1=[1,240],$Vk1=[1,241],$Vl1=[13,25,48,49,68,69,70,71],$Vm1=[23,58,60],$Vn1=[7,11,23,26,34,36,37,38,44,45,46,52,54,58,60,64,65,75,76,77,78,79],$Vo1=[1,271],$Vp1=[23,25],$Vq1=[13,25,48,49],$Vr1=[13,25,48,49,68,69],$Vs1=[1,315],$Vt1=[1,341],$Vu1=[1,342],$Vv1=[13,14];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"general":4,"EOF":5,"cuerpo":6,"COMENTARIO":7,"funcionMetodo":8,"START":9,"WITH":10,"ID":11,"PAR_ABRE":12,"PAR_CIERRA":13,"PCOMA":14,"expresion":15,"variable":16,"vectores":17,"listas":18,"tipo":19,"parametros":20,"LLABRE":21,"statement":22,"LLCIERRA":23,"VOID":24,"COMA":25,"LISTA":26,"MENOR":27,"MAYOR":28,"CABRE":29,"CCIERRA":30,"cuerpoFunciones":31,"declaraciones":32,"sentencias":33,"IMPRIMIR":34,"listaExpresiones":35,"BREAK":36,"CONTINUE":37,"RETURN":38,"if":39,"switch":40,"while":41,"for":42,"dowhile":43,"DO":44,"WHILE":45,"FOR":46,"declaracionFor":47,"MAS":48,"MENOS":49,"IGUAL":50,"casteos":51,"SWITCH":52,"casos":53,"IF":54,"else":55,"ELSE":56,"caso":57,"CASE":58,"DPUNTOS":59,"DEFAULT":60,"identificadores":61,"NUEVO":62,"listaVectores":63,"AGREGAR":64,"MODIFICAR":65,"aritmeticos":66,"TOCHARARRAY":67,"POR":68,"DIVIDIR":69,"MOD":70,"POTENCIA":71,"ENTERO":72,"DECIMAL":73,"SACAR":74,"INT":75,"BOOLEAN":76,"DOUBLE":77,"CHAR":78,"STRING":79,"NOT":80,"AND":81,"OR":82,"IGUALACION":83,"DIFERENCIA":84,"MAYOR_IGUAL":85,"MENOR_IGUAL":86,"MINUSCULAS":87,"MAYUSCULAS":88,"LENGTH":89,"TRUNCATE":90,"ROUND":91,"TYPEOF":92,"TOSTRING":93,"TRUE":94,"FALSE":95,"CARACTER":96,"FRASE":97,"INTERROGACION":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"COMENTARIO",9:"START",10:"WITH",11:"ID",12:"PAR_ABRE",13:"PAR_CIERRA",14:"PCOMA",21:"LLABRE",23:"LLCIERRA",24:"VOID",25:"COMA",26:"LISTA",27:"MENOR",28:"MAYOR",29:"CABRE",30:"CCIERRA",34:"IMPRIMIR",36:"BREAK",37:"CONTINUE",38:"RETURN",44:"DO",45:"WHILE",46:"FOR",48:"MAS",49:"MENOS",50:"IGUAL",52:"SWITCH",54:"IF",56:"ELSE",58:"CASE",59:"DPUNTOS",60:"DEFAULT",62:"NUEVO",64:"AGREGAR",65:"MODIFICAR",67:"TOCHARARRAY",68:"POR",69:"DIVIDIR",70:"MOD",71:"POTENCIA",72:"ENTERO",73:"DECIMAL",74:"SACAR",75:"INT",76:"BOOLEAN",77:"DOUBLE",78:"CHAR",79:"STRING",80:"NOT",81:"AND",82:"OR",83:"IGUALACION",84:"DIFERENCIA",85:"MAYOR_IGUAL",86:"MENOR_IGUAL",87:"MINUSCULAS",88:"MAYUSCULAS",89:"LENGTH",90:"TRUNCATE",91:"ROUND",92:"TYPEOF",93:"TOSTRING",94:"TRUE",95:"FALSE",96:"CARACTER",97:"FRASE",98:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,6],[6,7],[6,1],[6,1],[6,1],[8,8],[8,7],[8,8],[8,7],[20,3],[20,2],[20,5],[20,4],[31,2],[31,1],[32,1],[32,1],[32,1],[32,1],[32,5],[32,2],[32,2],[32,3],[32,1],[33,1],[33,1],[33,1],[33,1],[33,1],[43,9],[42,11],[42,13],[42,13],[47,4],[47,3],[47,4],[47,3],[40,7],[39,8],[55,4],[55,2],[55,0],[41,7],[22,1],[22,0],[53,2],[53,1],[57,4],[57,3],[16,3],[16,5],[16,4],[16,4],[16,3],[16,4],[16,4],[16,5],[16,4],[17,11],[17,9],[17,7],[17,10],[17,8],[18,12],[18,7],[18,9],[18,11],[63,3],[63,1],[35,3],[35,1],[66,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[66,1],[66,4],[66,6],[66,3],[51,5],[61,3],[61,1],[19,1],[19,1],[19,1],[19,1],[19,1],[15,2],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[15,4],[15,6],[15,4],[15,3],[15,4],[15,4],[15,4],[15,4],[15,4],[15,4],[15,4],[15,4],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		return $$[$0-1];
	
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
this.$ = [$$[$0]]; 
break;
case 4: case 29:
this.$= new Declaracion("comentario", "", $$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 5: case 8: case 9: case 21: case 22: case 24: case 30: case 31: case 32: case 33: case 34: case 74: case 91: case 92: case 93: case 94: case 95: case 96:
this.$= $$[$0]
break;
case 6:
this.$= new Llamadas($$[$0-3], [], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 7:
this.$= new Llamadas($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 10: case 23: case 46:
this.$ = $$[$0]
break;
case 11:
this.$= $$[$0-7]+" "+$$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0]
break;
case 12:
this.$= $$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0]
break;
case 13:
this.$= new Metodos($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 14:
this.$= new Metodos($$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 15: case 90:
this.$= $$[$0-2]+","+$$[$0]
break;
case 16:
this.$ = $$[$0-1]+"-"+$$[$0]
break;
case 17:
this.$ = "lista&"+$$[$0-2]+"-"+$$[$0]
break;
case 18:
this.$ = "vector&"+$$[$0-3]+"-"+$$[$0-2]
break;
case 19:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 20:
this.$= [$$[$0]];
break;
case 25:
this.$= new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 26:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 27:
this.$=new Continue(_$[$0-1].firstfirst_line, _$[$0-1].first_column)
break;
case 28:
this.$=new Return(_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 35:
 this.$ = new DoWhile($$[$0-2], $$[$0-6],  _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 36:
 this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1],  _$[$0-10].first_line, _$[$0-10].first_column)
break;
case 37:
 this.$ = new For($$[$0-10], $$[$0-8], new Declaracion("", $$[$0-6], new Aritmetica(new Acceso($$[$0-6], _$[$0-12].first_line, _$[$0-12].first_column), new Literal("1",TipoLiteral.ENTERO, _$[$0-12].first_line, _$[$0-12].first_column), TipoAritmetica.SUMA, _$[$0-12].first_line, _$[$0-12].first_column),_$[$0-12].first_line, _$[$0-12].first_column), $$[$0-1],  _$[$0-12].first_line, _$[$0-12].first_column)
break;
case 38:
 this.$ = new For($$[$0-10], $$[$0-8], new Declaracion("", $$[$0-6], new Aritmetica(new Acceso($$[$0-6], _$[$0-12].first_line, _$[$0-12].first_column), new Literal("1",TipoLiteral.ENTERO, _$[$0-12].first_line, _$[$0-12].first_column), TipoAritmetica.RESTA, _$[$0-12].first_line, _$[$0-12].first_column),_$[$0-12].first_line, _$[$0-12].first_column), $$[$0-1],  _$[$0-12].first_line, _$[$0-12].first_column)
break;
case 39: case 41:
this.$= new Declaracion($$[$0-3], $$[$0-2], $$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 40: case 42:
this.$= new Declaracion("", $$[$0-2], $$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 43:
this.$= new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 44:
this.$= new If($$[$0-5], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 45:
this.$ = $$[$0-1]
break;
case 47:
this.$ = null
break;
case 48:
 this.$ = new While($$[$0-4], $$[$0-1],  _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 49:

                                                                                                    let arregloInstrucciones = [];
                                                                                                    for(let x = 0; x < $$[$0].length; x++){
                                                                                                        if($$[$0][x].length > 0){
                                                                                                            for(let y = 0; y < $$[$0][x].length; y++){
                                                                                                                arregloInstrucciones.push($$[$0][x][y])
                                                                                                            }
                                                                                                        }else{
                                                                                                            arregloInstrucciones.push($$[$0][x])
                                                                                                        }
                                                                                                    }
                                                                                                    this.$= new CuerpoSentencias(arregloInstrucciones, _$[$0].first_line, _$[$0].first_column)
                                                                                                
break;
case 50:
this.$= new CuerpoSentencias([], _$[$0].first_line, _$[$0].first_column)
break;
case 51:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]
break;
case 52: case 76:
this.$= [$$[$0]]
break;
case 53:
this.$= new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 54:
this.$= new Case(new Literal("default",TipoLiteral.CADENA, _$[$0-2].first_line, _$[$0-2].first_column), $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 55:

                                                                                                    var arreglo = $$[$0-1].split(",");
                                                                                                    var expresiones = [];
                                                                                                    for (let index = 0; index < arreglo.length; index++) {
                                                                                                        var valor;
                                                                                                        if($$[$0-2].toString().toLowerCase() == "int"){
                                                                                                            var valor = new Literal(0,TipoLiteral.ENTERO, _$[$0-2].first_line, _$[$0-2].first_column)
                                                                                                        }else if($$[$0-2].toString().toLowerCase() == "double"){
                                                                                                            var valor = new Literal(0.0,TipoLiteral.DOUBLE, _$[$0-2].first_line, _$[$0-2].first_column)
                                                                                                        }else if($$[$0-2].toString().toLowerCase() == "boolean"){
                                                                                                            var valor = new Literal("true",TipoLiteral.BOOLEAN, _$[$0-2].first_line, _$[$0-2].first_column)
                                                                                                        }else if($$[$0-2].toString().toLowerCase() == "char"){
                                                                                                            var valor = new Literal('0',TipoLiteral.CHAR, _$[$0-2].first_line, _$[$0-2].first_column)
                                                                                                        }else if($$[$0-2].toString().toLowerCase() == "string"){
                                                                                                            var valor = new Literal("",TipoLiteral.CADENA, _$[$0-2].first_line, _$[$0-2].first_column)
                                                                                                        } 
                                                                                                        expresiones.push(new Declaracion($$[$0-2], arreglo[index], valor,_$[$0-2].first_line, _$[$0-2].first_column))
                                                                                                    }
                                                                                                    this.$ = expresiones;
                                                                                                
break;
case 56:
  
                                                                                                    var arreglo = $$[$0-3].split(",");
                                                                                                    var expresiones = [];
                                                                                                    for (let index = 0; index < arreglo.length; index++) {
                                                                                                        expresiones.push(new Declaracion($$[$0-4], arreglo[index], $$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column))
                                                                                                    }
                                                                                                    this.$ = expresiones;
                                                                                                
break;
case 57:

                                                                                                    var arreglo = $$[$0-3].split(",");
                                                                                                    var expresiones = [];
                                                                                                    for (let index = 0; index < arreglo.length; index++) {
                                                                                                        expresiones.push(new Declaracion("", arreglo[index], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column))
                                                                                                    }
                                                                                                    this.$ = expresiones;
                                                                                                
break;
case 58:

                                                                                                    var arreglo = $$[$0-2].split(",");
                                                                                                    var expresiones = [];
                                                                                                    for (let index = 0; index < arreglo.length; index++) {
                                                                                                        expresiones.push(new Declaracion($$[$0-3], arreglo[index], $$[$0],_$[$0-3].first_line, _$[$0-3].first_column))
                                                                                                    }
                                                                                                    this.$ = expresiones;
                                                                                                
break;
case 59:

                                                                                                    var arreglo = $$[$0-2].split(",");
                                                                                                    var expresiones = [];
                                                                                                    for (let index = 0; index < arreglo.length; index++) {
                                                                                                        expresiones.push(new Declaracion("", arreglo[index], $$[$0],_$[$0-2].first_line, _$[$0-2].first_column))
                                                                                                    }
                                                                                                    this.$ = expresiones;
                                                                                                
break;
case 60:
this.$= new Declaracion("", $$[$0-3], new Aritmetica(new Acceso($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column), new Literal("1",TipoLiteral.ENTERO, _$[$0-3].first_line, _$[$0-3].first_column), TipoAritmetica.SUMA, _$[$0-3].first_line, _$[$0-3].first_column),_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 61:
this.$= new Declaracion("", $$[$0-3], new Aritmetica(new Acceso($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column), new Literal("1",TipoLiteral.ENTERO, _$[$0-3].first_line, _$[$0-3].first_column), TipoAritmetica.RESTA, _$[$0-3].first_line, _$[$0-3].first_column),_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 62:
this.$= new Llamadas($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 63:
this.$= new Llamadas($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 64:

                                                                                                    if($$[$0-10].toString().toLowerCase() == $$[$0-4].toString().toLowerCase()){
                                                                                                        this.$= new Declaracion("vector@si", $$[$0-10]+"&"+$$[$0-9], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column)
                                                                                                    }else{
                                                                                                        throw new Error_(_$[$0-10].first_line, _$[$0-10].first_column, "Semántico", "La asignación del vector: "+$$[$0-9].toString()+", no es del mismo tipo. ("+$$[$0-10]+" _ "+$$[$0-4]+")")
                                                                                                    }
                                                                                                
break;
case 65:
this.$= new Declaracion("vector@no", $$[$0-8]+"&"+$$[$0-7], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 66:
this.$= new ModiVectores($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 67:
this.$= new Declaracion("vector@si", "&"+$$[$0-9], $$[$0-2],_$[$0-9].first_line, _$[$0-9].first_column)
break;
case 68:
this.$= new Declaracion("vector@no", "&"+$$[$0-7], $$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 69:
this.$= new Declaracion("lista", $$[$0-9]+"&"+$$[$0-7], "", _$[$0-11].first_line, _$[$0-11].first_column)
break;
case 70:
this.$= new AgregarLista($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 71:
this.$= new ModificarLista($$[$0-6], $$[$0-4], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 72:
this.$= new Declaracion("listaChar", $$[$0-8]+"&"+$$[$0-6], new toCharArray($$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column), _$[$0-10].first_line, _$[$0-10].first_column)
break;
case 73:
this.$= new Vectores($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 75:
$$[$0-2].push($$[$0]); this.$= $$[$0-2]
break;
case 77: case 116:
this.$= new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column)
break;
case 78: case 101:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 79: case 102:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 80: case 103:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 81: case 104:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 82: case 105:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 83: case 106:
this.$= new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 84: case 129:
this.$= new Literal($$[$0],TipoLiteral.ENTERO, _$[$0].first_line, _$[$0].first_column)
break;
case 85: case 130:
this.$= new Literal($$[$0],TipoLiteral.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 86: case 117:
this.$= new AccesoVectores($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 87: case 118:
this.$= new AccesoListas($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 88: case 107:
this.$= $$[$0-1]
break;
case 89:
this.$ = new Casteo($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 97:
this.$= new Aritmetica($$[$0],new Literal("-1",TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 98:
this.$= new Logica($$[$0-1],"", TipoLogica.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 99:
this.$= new Logica($$[$0-2],$$[$0], TipoLogica.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 100:
this.$= new Logica($$[$0-2],$$[$0], TipoLogica.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 108:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 109:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 110:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYORI, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 111:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENORI, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 112:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 113:
this.$= new Relacional($$[$0-2],$$[$0],TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 114:
this.$= new Aritmetica($$[$0-2], new Literal("1",TipoLiteral.ENTERO, _$[$0-2].first_line, _$[$0-2].first_column), TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 115:
this.$= new Aritmetica($$[$0-2], new Literal("1",TipoLiteral.ENTERO, _$[$0-2].first_line, _$[$0-2].first_column), TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 121:
this.$= new Minusculas($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 122:
this.$= new Mayusculas($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 123:
this.$= new Tamanio($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 124:
this.$= new Truncate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 125:
this.$= new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 126:
this.$= new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 127:
this.$= new toString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 128:
this.$= new toCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 131: case 132:
this.$= new Literal($$[$0],TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 133:
   
                                                                                                    var cadena = $$[$0].slice(1)
                                                                                                    var guardar = cadena.slice(0,-1)
                                                                                                    this.$= new Literal(guardar,TipoLiteral.CHAR, _$[$0].first_line, _$[$0].first_column)
                                                                                                
break;
case 134:
   
                                                                                                    var cadena = $$[$0].slice(1)
                                                                                                    var guardar = cadena.slice(0,-1)
                                                                                                    this.$= new Literal(guardar,TipoLiteral.CADENA, _$[$0].first_line, _$[$0].first_column)
                                                                                                
break;
case 135:
this.$= new IfAlterno($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,8:5,9:$V1,11:$V2,16:7,17:8,18:9,19:10,24:$V3,26:$V4,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{1:[3]},{5:[1,22],6:23,7:$V0,8:5,9:$V1,11:$V2,16:7,17:8,18:9,19:10,24:$V3,26:$V4,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),{10:[1,24]},o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),{11:[1,25],61:26},{11:[1,27]},{25:$Vd,50:[1,28]},o([25,50],$Ve,{12:[1,32],29:[1,33],48:[1,30],49:[1,31]}),{27:[1,34]},{12:[1,35]},{12:[1,36]},o($Vf,[2,92]),o($Vf,[2,93]),o($Vf,[2,94]),o($Vf,[2,95]),o($Vf,[2,96]),{1:[2,1]},o($Vc,[2,2]),{11:[1,37]},o($Vg,$Ve,{12:[1,38],29:$Vh}),{14:[1,40],25:$Vd,50:[1,41]},{12:[1,42]},{11:$Vi,12:$Vj,15:43,49:$Vk,51:44,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:[1,65],61:64},{48:[1,66]},{49:[1,67]},{11:$Vi,12:$VB,13:[1,69],15:70,35:68,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:72,30:[1,73],49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{19:74,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{11:[1,75]},{11:[1,76]},{12:[1,77]},{13:[1,79],19:80,20:78,26:$VC,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{30:[1,82]},o($VD,[2,55]),{11:$Vi,12:$Vj,15:83,49:$Vk,51:84,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{13:[1,86],19:80,20:85,26:$VC,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{14:[1,87],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VD,[2,59]),{11:$Vi,12:$VB,15:103,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:104,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:105,19:106,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VT,[2,116],{12:[1,108],29:[1,107]}),{12:[1,109]},{12:[1,110]},{12:[1,111]},{12:[1,112]},{12:[1,113]},{12:[1,114]},{12:[1,115]},{12:[1,116]},{12:[1,117]},o($VT,[2,129]),o($VT,[2,130]),o($VT,[2,131]),o($VT,[2,132]),o($VT,[2,133]),o($VT,[2,134]),o($Vg,[2,90]),o($Vg,$Ve),{14:[1,118]},{14:[1,119]},{13:[1,120],25:$VU},{14:[1,122]},o($VV,[2,76],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS}),{11:$Vi,12:$VB,15:105,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{27:$VE,28:$VF,30:[1,123],48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{50:[1,124]},{28:[1,125]},{25:[1,126]},{25:[1,127]},{11:$Vi,12:$VB,13:[1,128],15:129,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{13:[1,130],25:$VW},{21:[1,132]},{11:[1,133]},{27:[1,134]},{50:[1,135]},{14:[1,136],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VD,[2,58]),{13:[1,137],25:$VW},{21:[1,138]},o($VD,[2,57]),{11:$Vi,12:$VB,15:139,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:140,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:141,48:[1,142],49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:143,49:[1,144],67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:145,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:146,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:147,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:148,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:149,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:150,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:151,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:152,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:153,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:154,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:155,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VT,[2,97]),o($VT,[2,98]),{13:[1,156],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,157]},{11:$Vi,12:$VB,15:158,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,13:[1,160],15:70,35:159,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:[1,161]},{11:$Vi,12:$VB,15:162,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:163,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:164,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:165,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:166,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:167,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:168,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:169,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VD,[2,60]),o($VD,[2,61]),{14:[1,170]},{11:$Vi,12:$VB,15:171,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VD,[2,63]),{50:[1,172]},{21:[1,174],62:[1,173]},{11:[1,175]},{11:$Vi,12:$VB,15:176,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$VX,12:$VY,66:177,72:$VZ,73:$V_,74:$V$},{14:[1,183]},{13:[1,184],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{21:[1,185]},{19:80,20:186,26:$VC,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:187,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},o($VV,[2,16],{29:[1,210]}),{19:211,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{21:[1,213],62:[1,212]},o($VD,[2,56]),{21:[1,214]},{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:215,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},o([13,14,23,25,30,59,81,82,98],[2,99],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,83:$VO,84:$VP,85:$VQ,86:$VR}),o([13,14,23,25,30,59,82,98],[2,100],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,83:$VO,84:$VP,85:$VQ,86:$VR}),o($Vb1,[2,101],{68:$VI,69:$VJ,70:$VK,71:$VL}),o($VT,[2,114]),o($Vb1,[2,102],{68:$VI,69:$VJ,70:$VK,71:$VL}),o($VT,[2,115],{15:103,11:$Vi,12:$VB,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA}),o($Vc1,[2,103],{70:$VK,71:$VL}),o($Vc1,[2,104],{70:$VK,71:$VL}),o($VT,[2,105]),o($VT,[2,106]),o($Vd1,[2,108],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,85:$VQ,86:$VR}),o($Vd1,[2,109],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,85:$VQ,86:$VR}),o($Ve1,[2,110],{48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL}),o($Ve1,[2,111],{48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL}),o($Ve1,[2,112],{48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL}),o($Ve1,[2,113],{48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL}),{27:$VE,28:$VF,48:$VG,49:$VH,59:[1,216],68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VT,[2,107]),{11:$Vi,12:$VB,15:217,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{27:$VE,28:$VF,30:[1,218],48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,219],25:$VU},o($VT,[2,120]),{25:[1,220]},{13:[1,221],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,222],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,223],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,224],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,225],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,226],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,227],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,228],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VD,[2,62]),o($VV,[2,75],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS}),{11:$Vi,12:$VB,15:229,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{19:230,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{11:$Vi,12:$VB,15:232,49:$Vk,63:231,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{50:[1,233]},{13:[1,234],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{25:[1,235],48:$Vf1,49:$Vg1,68:$Vh1,69:$Vi1,70:$Vj1,71:$Vk1},o($Vl1,[2,77],{29:[1,242]}),o($Vl1,[2,84]),o($Vl1,[2,85]),{12:[1,243]},{11:$VX,12:$VY,66:244,72:$VZ,73:$V_,74:$V$},o($Vc,[2,6]),{14:[1,245]},{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:246,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},o($VV,[2,15]),{23:[1,247]},o($Vm1,[2,49],{61:12,16:190,17:191,18:192,33:193,19:199,39:200,40:201,41:202,42:203,43:204,32:248,7:$V01,11:$V2,26:$V4,34:$V21,36:$V31,37:$V41,38:$V51,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb}),o($Vn1,[2,20]),o($Vn1,[2,21]),o($Vn1,[2,22]),o($Vn1,[2,23]),o($Vn1,[2,24]),{12:[1,249]},{14:[1,250]},{14:[1,251]},{11:$Vi,12:$VB,15:252,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vn1,[2,29]),{11:[1,253],61:26},o($Vn1,[2,30]),o($Vn1,[2,31]),o($Vn1,[2,32]),o($Vn1,[2,33]),o($Vn1,[2,34]),{12:[1,254]},{12:[1,255]},{12:[1,256]},{12:[1,257]},{21:[1,258]},{30:[1,259]},{28:[1,260]},{19:261,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{11:$Vi,12:$VB,15:232,49:$Vk,63:262,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:263,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{23:[1,264]},{11:$Vi,12:$VB,15:265,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{14:[1,266],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VT,[2,117]),o($VT,[2,119]),{11:$Vi,12:$VB,15:267,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VT,[2,121]),o($VT,[2,122]),o($VT,[2,123]),o($VT,[2,124]),o($VT,[2,125]),o($VT,[2,126]),o($VT,[2,127]),o($VT,[2,128]),{14:[1,268],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{29:[1,269]},{23:[1,270],25:$Vo1},o($Vp1,[2,74],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS}),{62:[1,272],67:[1,273]},{14:[1,274]},{11:$Vi,12:$VB,15:275,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$VX,12:$VY,66:276,72:$VZ,73:$V_,74:$V$},{11:$VX,12:$VY,66:277,72:$VZ,73:$V_,74:$V$},{11:$VX,12:$VY,66:278,72:$VZ,73:$V_,74:$V$},{11:$VX,12:$VY,66:279,72:$VZ,73:$V_,74:$V$},{11:$VX,12:$VY,66:280,72:$VZ,73:$V_,74:$V$},{11:$VX,12:$VY,66:281,72:$VZ,73:$V_,74:$V$},{11:$Vi,12:$VB,15:282,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:[1,283]},{13:[1,284],48:$Vf1,49:$Vg1,68:$Vh1,69:$Vi1,70:$Vj1,71:$Vk1},o($Vc,[2,7]),{23:[1,285]},o($Vc,[2,12]),o($Vn1,[2,19]),{11:$Vi,12:$VB,15:70,35:286,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vn1,[2,26]),o($Vn1,[2,27]),{14:[1,287],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($Vg,$Ve,{29:$Vh}),{11:$Vi,12:$VB,15:288,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:289,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:$Vi,12:$VB,15:290,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{11:[1,293],19:292,47:291,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:294,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},o($VV,[2,18]),{11:[1,295]},{29:[1,296]},{23:[1,297],25:$Vo1},{23:[1,298]},o($Vc,[2,14]),{14:[1,299],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o([5,7,9,11,13,14,23,24,26,34,36,37,38,44,45,46,52,54,58,60,64,65,75,76,77,78,79],[2,89]),{13:[1,300],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VD,[2,66]),{11:$Vi,12:$VB,15:301,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{14:[1,302]},{11:$Vi,12:$VB,15:232,49:$Vk,63:303,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{26:[1,304]},{12:[1,305]},o($VD,[2,70]),{13:[1,306],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($Vq1,[2,78],{68:$Vh1,69:$Vi1,70:$Vj1,71:$Vk1}),o($Vq1,[2,79],{68:$Vh1,69:$Vi1,70:$Vj1,71:$Vk1}),o($Vr1,[2,80],{70:$Vj1,71:$Vk1}),o($Vr1,[2,81],{70:$Vj1,71:$Vk1}),o($Vl1,[2,82]),o($Vl1,[2,83]),{27:$VE,28:$VF,30:[1,307],48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{25:[1,308]},o($Vl1,[2,88]),o($Vc,[2,11]),{13:[1,309],25:$VU},o($Vn1,[2,28]),{13:[1,310],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,311],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{13:[1,312],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{14:[1,313]},{11:[1,314]},{50:$Vs1},{23:[1,316]},o($VV,[2,17]),{11:$Vi,12:$VB,15:317,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{14:[1,318]},o($Vc,[2,13]),o($VT,[2,135]),o($VT,[2,118]),{27:$VE,28:$VF,30:[1,319],48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VD,[2,68]),o($Vp1,[2,73]),{27:[1,320]},{11:$Vi,12:$VB,15:321,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{14:[1,322]},o($Vl1,[2,86]),{11:$Vi,12:$VB,15:323,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{14:[1,324]},{21:[1,325]},{21:[1,326]},{21:[1,327]},{11:$Vi,12:$VB,15:328,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{50:[1,329]},{11:$Vi,12:$Vj,15:330,49:$Vk,51:331,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{45:[1,332]},{27:$VE,28:$VF,30:[1,333],48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VD,[2,65]),{14:[1,334]},{19:335,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{13:[1,336],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VD,[2,71]),{13:[1,337],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($Vn1,[2,25]),{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:338,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{53:339,57:340,58:$Vt1,60:$Vu1},{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:343,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{14:[1,344],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},{11:$Vi,12:$Vj,15:345,49:$Vk,51:346,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($Vv1,[2,40],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS}),o($Vv1,[2,42]),{12:[1,347]},{14:[1,348]},o($VD,[2,67]),{28:[1,349]},{14:[1,350]},o($Vl1,[2,87]),{23:[1,351]},{23:[1,352],57:353,58:$Vt1,60:$Vu1},o($Vm1,[2,52]),{11:$Vi,12:$VB,15:354,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},{59:[1,355]},{23:[1,356]},{11:[1,358],19:292,47:357,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},o($Vv1,[2,39],{27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS}),o($Vv1,[2,41]),{11:$Vi,12:$VB,15:359,49:$Vk,67:$Vl,72:$Vm,73:$Vn,74:$Vo,80:$Vp,87:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA},o($VD,[2,64]),{14:[1,360]},o($VD,[2,72]),o($Vn1,[2,47],{55:361,56:[1,362]}),o($Vn1,[2,43]),o($Vm1,[2,51]),{27:$VE,28:$VF,48:$VG,49:$VH,59:[1,363],68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($Vm1,$V11,{61:12,31:188,32:189,16:190,17:191,18:192,33:193,19:199,39:200,40:201,41:202,42:203,43:204,22:364,7:$V01,11:$V2,26:$V4,34:$V21,36:$V31,37:$V41,38:$V51,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb}),o($Vn1,[2,48]),{13:[1,365]},{48:[1,366],49:[1,367],50:$Vs1},{13:[1,368],27:$VE,28:$VF,48:$VG,49:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,98:$VS},o($VD,[2,69]),o($Vn1,[2,44]),{21:[1,369],39:370,54:$Va1},o($Vm1,$V11,{61:12,31:188,32:189,16:190,17:191,18:192,33:193,19:199,39:200,40:201,41:202,42:203,43:204,22:371,7:$V01,11:$V2,26:$V4,34:$V21,36:$V31,37:$V41,38:$V51,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb}),o($Vm1,[2,54]),{21:[1,372]},{48:[1,373]},{49:[1,374]},{14:[1,375]},{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:376,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},o($Vn1,[2,46]),o($Vm1,[2,53]),{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:377,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{13:[1,378]},{13:[1,379]},o($Vn1,[2,35]),{23:[1,380]},{23:[1,381]},{21:[1,382]},{21:[1,383]},o($Vn1,[2,45]),o($Vn1,[2,36]),{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:384,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{7:$V01,11:$V2,16:190,17:191,18:192,19:199,22:385,23:$V11,26:$V4,31:188,32:189,33:193,34:$V21,36:$V31,37:$V41,38:$V51,39:200,40:201,41:202,42:203,43:204,44:$V61,45:$V71,46:$V81,52:$V91,54:$Va1,61:12,64:$V5,65:$V6,75:$V7,76:$V8,77:$V9,78:$Va,79:$Vb},{23:[1,386]},{23:[1,387]},o($Vn1,[2,37]),o($Vn1,[2,38])],
defaultActions: {22:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Error_} = require('../dist/Error/Error.js')
    const {Literal,TipoLiteral} = require('../dist/Expresiones/Literal.js');
    const {Aritmetica,TipoAritmetica} = require('../dist/Expresiones/Aritmetica.js');
    const {Logica, TipoLogica} = require('../dist/Expresiones/Logica.js');
    const {Relacional, TipoRelacional} = require('../dist/Expresiones/Relacional.js');
    const {Casteo} = require('../dist/Expresiones/Casteo.js');
    const {Acceso, AccesoVectores, ModiVectores, AgregarLista, AccesoListas, ModificarLista} = require('../dist/Expresiones/Acceso.js');
    const {Minusculas, Mayusculas, Tamanio, Truncate, Round, Typeof, toString, toCharArray} = require('../dist/Expresiones/FuncionesCambios.js');


    const {Declaracion} = require('../dist/Instrucciones/Declaracion.js');
    const {Vectores} = require('../dist/Instrucciones/Vectores.js');
    const {Imprimir} = require('../dist/Instrucciones/Imprimir.js');
    const {Break, Continue, Return} = require('../dist/Instrucciones/SentenciasTransferencia.js');
    const {CuerpoSentencias} = require('../dist/Instrucciones/CuerpoSentencias.js');
    const {If, IfAlterno} = require('../dist/Instrucciones/If.js');
    const {While} = require('../dist/Instrucciones/While.js');
    const {Case} = require('../dist/Instrucciones/Case.js');
    const {Switch} = require('../dist/Instrucciones/Switch.js');
    const {For} = require('../dist/Instrucciones/For.js');
    const {DoWhile} = require('../dist/Instrucciones/DoWhile.js');
    const {Metodos} = require('../dist/Instrucciones/Metodos.js');
    const {Llamadas} = require('../dist/Instrucciones/Llamadas.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:return "COMENTARIO";
break;
case 2:return "COMENTARIO"; 
break;
case 3:return "FRASE";
break;
case 4:return "CARACTER";
break;
case 5:return 94;
break;
case 6:return 95;
break;
case 7:return "INT";
break;
case 8:return "DOUBLE";
break;
case 9:return "BOOLEAN";
break;
case 10:return "CHAR";
break;
case 11:return "STRING";
break;
case 12:return "NUEVO"
break;
case 13:return "SALTO";
break;
case 14:return "BARRAI";
break;
case 15:return "COMILLAD";
break;
case 16:return "TAB";
break;
case 17:return "COMILLAS";
break;
case 18:return "LISTA";
break;
case 19:return "AGREGAR";
break;
case 20:return "SACAR";
break;
case 21:return "MODIFICAR";
break;
case 22:return "IF";
break;
case 23:return "SWITCH";
break;
case 24:return "ELSE";
break;
case 25:return "CASE";
break;
case 26:return "DEFAULT";
break;
case 27:return "WHILE";
break;
case 28:return "FOR";
break;
case 29:return "DO";
break;
case 30:return "BREAK";
break;
case 31:return "CONTINUE";
break;
case 32:return "RETURN";
break;
case 33:return "VOID";
break;
case 34:return "IMPRIMIR";
break;
case 35:return "MINUSCULAS";
break;
case 36:return "MAYUSCULAS";
break;
case 37:return "LENGTH";
break;
case 38:return "TRUNCATE";
break;
case 39:return "ROUND";
break;
case 40:return "TYPEOF";
break;
case 41:return "TOSTRING";
break;
case 42:return "TOCHARARRAY";
break;
case 43:return "START";
break;
case 44:return "WITH";
break;
case 45:return 73;
break;
case 46:return 72;
break;
case 47:return "ID";
break;
case 48:return 12;
break;
case 49:return 13;
break;
case 50:return 21
break;
case 51:return 23
break;
case 52:return 29
break;
case 53:return 30
break;
case 54:return 98;
break;
case 55:return "DPUNTOS";
break;
case 56:return "PCOMA";
break;
case 57:return 83;
break;
case 58:return 86;
break;
case 59:return 27;
break;
case 60:return 85;                     
break;
case 61:return 28;
break;
case 62:return 84;
break;
case 63:return 82;
break;
case 64:return 81;
break;
case 65:return 80;
break;
case 66:return 25;
break;
case 67:return 48;
break;
case 68:return 49;
break;
case 69:return 68;
break;
case 70:return 69;
break;
case 71:return 71;
break;
case 72:return 50;
break;
case 73:return 70;
break;
case 74:return 5;
break;
case 75:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:[\"]([^\"\n]|(\\"))*[\"])/i,/^(?:[\']([^\"\n]|(\\"))[\'])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:new\b)/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:If\b)/i,/^(?:switch\b)/i,/^(?:Else\b)/i,/^(?:Case\b)/i,/^(?:Default\b)/i,/^(?:While\b)/i,/^(?:For\b)/i,/^(?:Do\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:WriteLine\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:Start\b)/i,/^(?:With\b)/i,/^(?:[0-9]+(\.)[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-ZáéíóúÁÉÍÓÚ]+["_"0-9A-Za-záéíóúÁÉÍÓÚ]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}