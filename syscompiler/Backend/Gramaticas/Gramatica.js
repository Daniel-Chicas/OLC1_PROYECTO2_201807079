/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,8,11,29,30,31,32,33],$V8=[1,20],$V9=[2,26],$Va=[11,12,28],$Vb=[14,17,23],$Vc=[1,32],$Vd=[1,30],$Ve=[1,31],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[17,25,26,34,35,36,37,38,39,40,41,42,43],$Vv=[2,50],$Vw=[1,62],$Vx=[1,61],$Vy=[17,20,23,25,26,28,34,35,36,37,38,39,40,41,42,43],$Vz=[17,20,23,25,26,28,36,37,38,39,40,41],$VA=[17,20,23,25,26,28,34,35,36,37,38,39,40,41],$VB=[17,20,23,28,36,37],$VC=[17,20,23,28,36,37,38,39,40,41],$VD=[1,110],$VE=[20,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"general":4,"EOF":5,"cuerpo":6,"variable":7,"COMENTARIO":8,"vectores":9,"tipo":10,"ID":11,"CABRE":12,"CCIERRA":13,"IGUAL":14,"NUEVO":15,"ENTERO":16,"PCOMA":17,"LLABRE":18,"arreglo":19,"LLCIERRA":20,"identificadores":21,"expresion":22,"COMA":23,"casteos":24,"MAS":25,"MENOS":26,"PAR_ABRE":27,"PAR_CIERRA":28,"INT":29,"BOOLEAN":30,"DOUBLE":31,"CHAR":32,"STRING":33,"POR":34,"DIVIDIR":35,"IGUALACION":36,"DIFERENCIA":37,"MAYOR_IGUAL":38,"MENOR_IGUAL":39,"MAYOR":40,"MENOR":41,"MOD":42,"POTENCIA":43,"FRASE":44,"TRUE":45,"FALSE":46,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"COMENTARIO",11:"ID",12:"CABRE",13:"CCIERRA",14:"IGUAL",15:"NUEVO",16:"ENTERO",17:"PCOMA",18:"LLABRE",20:"LLCIERRA",23:"COMA",25:"MAS",26:"MENOS",27:"PAR_ABRE",28:"PAR_CIERRA",29:"INT",30:"BOOLEAN",31:"DOUBLE",32:"CHAR",33:"STRING",34:"POR",35:"DIVIDIR",36:"IGUALACION",37:"DIFERENCIA",38:"MAYOR_IGUAL",39:"MENOR_IGUAL",40:"MAYOR",41:"MENOR",42:"MOD",43:"POTENCIA",44:"FRASE",45:"TRUE",46:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[9,11],[9,10],[9,9],[9,8],[9,8],[9,7],[9,6],[9,7],[19,3],[19,1],[7,3],[7,5],[7,4],[7,4],[7,3],[7,4],[7,4],[24,5],[21,3],[21,1],[10,1],[10,1],[10,1],[10,1],[10,1],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3],[22,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4: case 5: case 6:
console.log($$[$0])
break;
case 7:
this.$= $$[$0-10]+" "+$$[$0-9]+" "+$$[$0-8]+" "+$$[$0-7]+" "+$$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0]
break;
case 8:
this.$= $$[$0-9]+" "+$$[$0-8]+" "+$$[$0-7]+" "+$$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0]
break;
case 9:
this.$= $$[$0-8]+" "+$$[$0-7]+" "+$$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0]
break;
case 10: case 11:
this.$= $$[$0-7]+" "+$$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0]
break;
case 12: case 14:
this.$= $$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0]
break;
case 13:
this.$= $$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+" "+$$[$0-1]+" "+$$[$0]
break;
case 15: case 25:
this.$= $$[$0-2]+","+$$[$0]
break;
case 16: case 26: case 27: case 28: case 29: case 30: case 31: case 47: case 48: case 49:
this.$= $$[$0]
break;
case 17:
this.$= $$[$0-2]+" "+$$[$0-1]+";"
break;
case 18:
this.$= $$[$0-4]+" "+$$[$0-3]+" = "+$$[$0-1]+";"
break;
case 19:
this.$= $$[$0-3]+" = "+$$[$0-1]+";"
break;
case 20:
this.$= $$[$0-3]+" "+$$[$0-2]+"="+$$[$0]
break;
case 21:
this.$= $$[$0-2]+"="+$$[$0]
break;
case 22:
this.$= $$[$0-3]+"++;"
break;
case 23:
this.$= $$[$0-3]+"--;"
break;
case 24:
this.$="("+$$[$0-3]+")"+$$[$0-1]+";"
break;
case 32:
this.$= "-"+$$[$0]
break;
case 33:
this.$= $$[$0-2]+"+"+$$[$0]
break;
case 34:
this.$= $$[$0-2]+"-"+$$[$0]
break;
case 35:
this.$= $$[$0-2]+"*"+$$[$0]
break;
case 36:
this.$= $$[$0-2]+"/"+$$[$0]
break;
case 37:
this.$= $$[$0-2]+"=="+$$[$0]
break;
case 38:
this.$= $$[$0-2]+"!="+$$[$0]
break;
case 39:
this.$= $$[$0-2]+"<="+$$[$0]
break;
case 40:
this.$= $$[$0-2]+">="+$$[$0]
break;
case 41:
this.$= $$[$0-2]+"<"+$$[$0]
break;
case 42:
this.$= $$[$0-2]+">"+$$[$0]
break;
case 43:
this.$= "("+$$[$0-1]+")"
break;
case 44:
this.$= $$[$0-2]+"%"+$$[$0]
break;
case 45:
this.$= $$[$0-2]+"^"+$$[$0]
break;
case 46:
this.$= Number($$[$0])
break;
case 50:
this.$=$$[$0]
break;
case 51:
this.$= $$[$0-2]+"++"
break;
case 52:
this.$= $$[$0-2]+"--"
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,9:6,10:7,11:$V1,21:8,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6},{1:[3]},{5:[1,15],6:16,7:4,8:$V0,9:6,10:7,11:$V1,21:8,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{11:[1,18],21:17},{14:[1,19],23:$V8},o([14,23],$V9,{12:[1,23],25:[1,21],26:[1,22]}),o($Va,[2,27]),o($Va,[2,28]),o($Va,[2,29]),o($Va,[2,30]),o($Va,[2,31]),{1:[2,1]},o($V7,[2,2]),{14:[1,25],17:[1,24],23:$V8},o($Vb,$V9,{12:[1,26]}),{11:[1,29],16:$Vc,22:27,24:28,26:$Vd,27:$Ve,44:$Vf,45:$Vg,46:$Vh},{11:[1,37],21:36},{25:[1,38]},{26:[1,39]},{13:[1,40],16:[1,41]},o($V7,[2,17]),{11:[1,44],16:$Vc,22:42,24:43,26:$Vd,27:$Ve,44:$Vf,45:$Vg,46:$Vh},{13:[1,45]},{17:[1,46],25:$Vi,26:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},o($V7,[2,21]),o($Vu,$Vv,{12:[1,59]}),{11:$Vw,16:$Vc,22:60,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{10:64,11:$Vw,16:$Vc,22:63,26:$Vd,27:$Vx,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6,44:$Vf,45:$Vg,46:$Vh},o($Vy,[2,46]),o($Vy,[2,47]),o($Vy,[2,48]),o($Vy,[2,49]),o($Vb,[2,25]),o($Vb,$V9),{17:[1,65]},{17:[1,66]},{14:[1,67]},{13:[1,68]},{17:[1,69],25:$Vi,26:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},o($V7,[2,20]),o($Vu,$Vv,{12:[1,70]}),{14:[1,71]},o($V7,[2,19]),{11:$Vw,16:$Vc,22:72,25:[1,73],26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:74,26:[1,75],27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:76,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:77,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:78,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:79,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:80,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:81,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:82,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:83,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:84,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{11:$Vw,16:$Vc,22:85,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{16:[1,86]},o($Vy,[2,32]),{11:$Vw,16:$Vc,22:63,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},o($Vy,$Vv),{25:$Vi,26:$Vj,28:[1,87],34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{28:[1,88]},o($V7,[2,22]),o($V7,[2,23]),{11:$Vw,15:[1,89],16:$Vc,18:[1,90],22:91,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{14:[1,92]},o($V7,[2,18]),{16:[1,93]},{15:[1,94],18:[1,95]},o($Vz,[2,33],{34:$Vk,35:$Vl,42:$Vs,43:$Vt}),o($Vy,[2,51]),o($Vz,[2,34],{34:$Vk,35:$Vl,42:$Vs,43:$Vt}),o($Vy,[2,52],{22:60,11:$Vw,16:$Vc,27:$Vx,44:$Vf,45:$Vg,46:$Vh}),o($VA,[2,35],{42:$Vs,43:$Vt}),o($VA,[2,36],{42:$Vs,43:$Vt}),o($VB,[2,37],{25:$Vi,26:$Vj,34:$Vk,35:$Vl,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt}),o($VB,[2,38],{25:$Vi,26:$Vj,34:$Vk,35:$Vl,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt}),o($VC,[2,39],{25:$Vi,26:$Vj,34:$Vk,35:$Vl,42:$Vs,43:$Vt}),o($VC,[2,40],{25:$Vi,26:$Vj,34:$Vk,35:$Vl,42:$Vs,43:$Vt}),o($VC,[2,41],{25:$Vi,26:$Vj,34:$Vk,35:$Vl,42:$Vs,43:$Vt}),o($VC,[2,42],{25:$Vi,26:$Vj,34:$Vk,35:$Vl,42:$Vs,43:$Vt}),o($Vy,[2,44]),o($Vy,[2,45]),{13:[1,96]},o($Vy,[2,43]),{11:$Vw,16:$Vc,22:97,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{10:98,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6},{11:$Vw,16:$Vc,19:99,22:100,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{17:[1,101],25:$Vi,26:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{11:$Vw,16:$Vc,22:102,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{13:[1,103]},{10:104,29:$V2,30:$V3,31:$V4,32:$V5,33:$V6},{11:$Vw,16:$Vc,19:105,22:100,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},{17:[1,106]},{17:[1,107],25:$Vi,26:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{12:[1,108]},{20:[1,109],23:$VD},o($VE,[2,16],{25:$Vi,26:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt}),o($V7,[2,13]),{17:[1,111],25:$Vi,26:$Vj,34:$Vk,35:$Vl,36:$Vm,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{17:[1,112]},{12:[1,113]},{20:[1,114],23:$VD},o($V7,[2,12]),o($V7,[2,24]),{16:[1,115]},{17:[1,116]},{11:$Vw,16:$Vc,19:117,22:100,26:$Vd,27:$Vx,44:$Vf,45:$Vg,46:$Vh},o($V7,[2,14]),o($V7,[2,11]),{16:[1,118]},{17:[1,119]},{13:[1,120]},o($V7,[2,10]),o($VE,[2,15]),{13:[1,121]},o($V7,[2,9]),{17:[1,122]},{17:[1,123]},o($V7,[2,8]),o($V7,[2,7])],
defaultActions: {15:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:return "COMENTARIO";
break;
case 2:return "COMENTARIO"; 
break;
case 3:return "FRASE";
break;
case 4:return 45;
break;
case 5:return 46;
break;
case 6:return "INT";
break;
case 7:return "DOUBLE";
break;
case 8:return "BOOLEAN";
break;
case 9:return "CHAR";
break;
case 10:return "STRING";
break;
case 11:return "NUEVO"
break;
case 12:return "SALTO";
break;
case 13:return "BARRAI";
break;
case 14:return "COMILLAD";
break;
case 15:return "TAB";
break;
case 16:return "COMILLAS";
break;
case 17:return 16;
break;
case 18:return 16;
break;
case 19:return "ID";
break;
case 20:return 27;
break;
case 21:return 28;
break;
case 22:return 18
break;
case 23:return 20
break;
case 24:return 12
break;
case 25:return 13
break;
case 26:return 'INTERROGACION';
break;
case 27:return "DPUNTOS";
break;
case 28:return "PCOMA";
break;
case 29:return 36;
break;
case 30:return 39;
break;
case 31:return 41;
break;
case 32:return 38;                     
break;
case 33:return 40;
break;
case 34:return 37;
break;
case 35:return 'OR';
break;
case 36:return 'AND'
break;
case 37:return 'NOT'
break;
case 38:return 23;
break;
case 39:return 25;
break;
case 40:return 26;
break;
case 41:return 34;
break;
case 42:return 35;
break;
case 43:return 43;
break;
case 44:return 14
break;
case 45:return 42;
break;
case 46:return 5;
break;
case 47:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:new\b)/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-ZáéíóúÁÉÍÓÚ]+["_"0-9A-Za-záéíóúÁÉÍÓÚ]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}