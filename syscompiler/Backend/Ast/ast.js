/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[5,7,9,21,75,76,77,78,79],$V9=[11,13,57,63],$Va=[1,33],$Vb=[1,32],$Vc=[1,30],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,34],$Vh=[1,31],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,50],$Vu=[1,59],$Vv=[1,60],$Vw=[1,70],$Vx=[1,69],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,57],$VD=[1,58],$VE=[1,65],$VF=[1,66],$VG=[1,67],$VH=[1,68],$VI=[1,71],$VJ=[13,14,20,22,43,44,54,58,62,63,68,69,70,71,81,82,83,84,85,86,98],$VK=[1,98],$VL=[1,101],$VM=[1,94],$VN=[1,95],$VO=[1,96],$VP=[1,97],$VQ=[1,114],$VR=[1,112],$VS=[1,113],$VT=[1,111],$VU=[1,110],$VV=[1,102],$VW=[1,103],$VX=[1,104],$VY=[13,22],$VZ=[7,11,20,28,30,31,32,38,40,41,47,49,53,55,61,64,65,75,76,77,78,79],$V_=[1,158],$V$=[2,86],$V01=[13,14,20,22,43,44,54,58,62,63,81,82,83,84,85,86,98],$V11=[13,14,20,22,43,44,54,58,62,63,68,69,81,82,83,84,85,86,98],$V21=[13,14,20,22,54,58,81,82,83,84,98],$V31=[13,14,20,22,54,58,62,63,81,82,83,84,85,86,98],$V41=[14,22,45],$V51=[1,194],$V61=[2,45],$V71=[1,238],$V81=[20,53,55],$V91=[1,254],$Va1=[1,255],$Vb1=[1,256],$Vc1=[1,257],$Vd1=[1,258],$Ve1=[1,277],$Vf1=[1,278],$Vg1=[1,279],$Vh1=[1,280],$Vi1=[1,281],$Vj1=[1,282],$Vk1=[13,22,43,44,58,68,69,70,71],$Vl1=[1,289],$Vm1=[1,290],$Vn1=[13,14],$Vo1=[1,302],$Vp1=[20,22],$Vq1=[13,22,43,44,58],$Vr1=[13,22,43,44,58,68,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"general":4,"EOF":5,"cuerpo":6,"COMENTARIO":7,"funcionMetodo":8,"START":9,"WITH":10,"ID":11,"PAR_ABRE":12,"PAR_CIERRA":13,"PCOMA":14,"expresion":15,"tipo":16,"parametros":17,"LLABRE":18,"cuerpoFunciones":19,"LLCIERRA":20,"VOID":21,"COMA":22,"declaraciones":23,"variable":24,"vectores":25,"listas":26,"sentencias":27,"IMPRIMIR":28,"listaExpresiones":29,"BREAK":30,"CONTINUE":31,"RETURN":32,"if":33,"switch":34,"while":35,"for":36,"dowhile":37,"DO":38,"statement":39,"WHILE":40,"FOR":41,"declaracionFor":42,"MAS":43,"MENOS":44,"IGUAL":45,"casteos":46,"SWITCH":47,"casos":48,"IF":49,"else":50,"ELSE":51,"caso":52,"CASE":53,"DPUNTOS":54,"DEFAULT":55,"identificadores":56,"CABRE":57,"CCIERRA":58,"NUEVO":59,"listaVectores":60,"LISTA":61,"MENOR":62,"MAYOR":63,"AGREGAR":64,"MODIFICAR":65,"aritmeticos":66,"TOCHARARRAY":67,"POR":68,"DIVIDIR":69,"MOD":70,"POTENCIA":71,"ENTERO":72,"DECIMAL":73,"SACAR":74,"INT":75,"BOOLEAN":76,"DOUBLE":77,"CHAR":78,"STRING":79,"NOT":80,"AND":81,"OR":82,"IGUALACION":83,"DIFERENCIA":84,"MAYOR_IGUAL":85,"MENOR_IGUAL":86,"MINUSCULAS":87,"MAYUSCULAS":88,"LENGTH":89,"TRUNCATE":90,"ROUND":91,"TYPEOF":92,"TOSTRING":93,"TRUE":94,"FALSE":95,"CARACTER":96,"FRASE":97,"INTERROGACION":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"COMENTARIO",9:"START",10:"WITH",11:"ID",12:"PAR_ABRE",13:"PAR_CIERRA",14:"PCOMA",18:"LLABRE",20:"LLCIERRA",21:"VOID",22:"COMA",28:"IMPRIMIR",30:"BREAK",31:"CONTINUE",32:"RETURN",38:"DO",40:"WHILE",41:"FOR",43:"MAS",44:"MENOS",45:"IGUAL",47:"SWITCH",49:"IF",51:"ELSE",53:"CASE",54:"DPUNTOS",55:"DEFAULT",57:"CABRE",58:"CCIERRA",59:"NUEVO",61:"LISTA",62:"MENOR",63:"MAYOR",64:"AGREGAR",65:"MODIFICAR",67:"TOCHARARRAY",68:"POR",69:"DIVIDIR",70:"MOD",71:"POTENCIA",72:"ENTERO",73:"DECIMAL",74:"SACAR",75:"INT",76:"BOOLEAN",77:"DOUBLE",78:"CHAR",79:"STRING",80:"NOT",81:"AND",82:"OR",83:"IGUALACION",84:"DIFERENCIA",85:"MAYOR_IGUAL",86:"MENOR_IGUAL",87:"MINUSCULAS",88:"MAYUSCULAS",89:"LENGTH",90:"TRUNCATE",91:"ROUND",92:"TYPEOF",93:"TOSTRING",94:"TRUE",95:"FALSE",96:"CARACTER",97:"FRASE",98:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,6],[6,7],[8,8],[8,7],[8,8],[8,7],[17,3],[17,2],[19,2],[19,1],[23,1],[23,1],[23,1],[23,1],[23,5],[23,2],[23,2],[23,3],[23,1],[27,1],[27,1],[27,1],[27,1],[27,1],[37,9],[36,11],[36,13],[36,13],[42,4],[42,3],[42,4],[42,3],[34,7],[33,8],[50,4],[50,2],[50,0],[35,7],[39,1],[39,0],[48,2],[48,1],[52,4],[52,3],[24,3],[24,5],[24,4],[24,4],[24,3],[24,4],[24,4],[24,5],[24,4],[25,11],[25,9],[25,7],[25,10],[25,8],[26,12],[26,7],[26,9],[26,11],[60,3],[60,1],[29,3],[29,1],[66,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[66,1],[66,4],[66,6],[46,5],[56,3],[56,1],[16,1],[16,1],[16,1],[16,1],[16,1],[15,2],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,4],[15,6],[15,4],[15,3],[15,4],[15,4],[15,4],[15,4],[15,4],[15,4],[15,4],[15,4],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
       this.$= new nodoArbol("RAIZ ARBOL","");
                                this.$.agregarHijo($$[$0-1]);
                                return this.$;
                        
break;
case 2:
   this.$ = new nodoArbol("GLOBAL","");
                                                                    this.$.agregarHijo($$[$0-1]);
                                                                    this.$.agregarHijo($$[$0]);
                                                                
break;
case 3:
   this.$ = new nodoArbol("GLOBAL","");   
                                                                    this.$.agregarHijo($$[$0]);
                                                                
break;
case 4:

                                                                    this.$ = new nodoArbol("Comentario", "");
                                                                    this.$.agregarHijo(new nodoArbol($$[$0], "Cuerpo"))
                                                                
break;
case 5: case 16: case 17: case 18: case 19: case 25: case 26: case 27: case 28: case 29: case 87: case 88: case 89: case 90: case 91:
this.$= $$[$0]
break;
case 6:

                                                                    this.$ = new nodoArbol("Inicio", "");
                                                                    this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-3], "Id"))
                                                                
break;
case 7:

                                                                    this.$ = new nodoArbol("Inicio", "");
                                                                    this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-4], "Id"))
                                                                    this.$.agregarHijo($$[$0-2])
                                                                    this.$.agregarHijo($$[$0])
                                                                
break;
case 8:

                                                                                                            this.$ = new nodoArbol("Funci√≥n", "");
                                                                                                            this.$.agregarHijo(new nodoArbol("Tipo: "+$$[$0-7], "Tipo"))
                                                                                                            this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-6], "Id"))
                                                                                                            this.$.agregarHijo($$[$0-4])
                                                                                                            this.$.agregarHijo($$[$0-1])
                                                                                                        
break;
case 9:

                                                                                                            this.$ = new nodoArbol("Funci√≥n", "");
                                                                                                            this.$.agregarHijo(new nodoArbol("Tipo: "+$$[$0-6], "Tipo"))
                                                                                                            this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-5], "Coma"))
                                                                                                            this.$.agregarHijo($$[$0-1])
                                                                                                        
break;
case 10:

                                                                                                            this.$ = new nodoArbol("M√©todo", "");
                                                                                                            this.$.agregarHijo(new nodoArbol("Tipo: "+$$[$0-7], "Tipo"))
                                                                                                            this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-6], "Id"))
                                                                                                            this.$.agregarHijo($$[$0-4])
                                                                                                            this.$.agregarHijo($$[$0-1])
                                                                                                        
break;
case 11:

                                                                                                            this.$ = new nodoArbol("M√©todo", "");
                                                                                                            this.$.agregarHijo(new nodoArbol("Tipo: "+$$[$0-6], "Tipo"))
                                                                                                            this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-5], "Coma"))
                                                                                                            this.$.agregarHijo($$[$0-1])
                                                                                                        
break;
case 12:

                                                                    this.$ = new nodoArbol("Parametros", "");
                                                                    this.$.agregarHijo($$[$0-2])
                                                                    this.$.agregarHijo(new nodoArbol(",", "Coma"))
                                                                    this.$.agregarHijo($$[$0])
                                                                
break;
case 13:
this.$= new nodoArbol($$[$0-1]+" "+$$[$0],"Expresion")
break;
case 14:
   this.$ = new nodoArbol("Declaraci√≥n","");
                                                                    this.$.agregarHijo($$[$0-1]);
                                                                    this.$.agregarHijo($$[$0]);
                                                                
break;
case 15:
   this.$ = new nodoArbol("Declaraci√≥n","");   
                                                                    this.$.agregarHijo($$[$0]);
break;
case 20:

                                                                                this.$ = new nodoArbol("Imprimir", "");
                                                                                this.$.agregarHijo($$[$0-2])
                                                                            
break;
case 21:
this.$ = new nodoArbol("Break", "")
break;
case 22:
this.$ = new nodoArbol("Continue", "")
break;
case 23:
this.$ = new nodoArbol("Return", "")
break;
case 24:

                                                                                this.$ = new nodoArbol("Comentario", "");
                                                                                this.$.agregarHijo(new nodoArbol($$[$0], "Cuerpo"))
                                                                            
break;
case 30:

                                                                                                this.$ = new nodoArbol("Do-While", "");
                                                                                                this.$.agregarHijo($$[$0-6])
                                                                                                this.$.agregarHijo($$[$0-2])
                                                                                            
break;
case 31:

                                                                                                                            this.$ = new nodoArbol("For", "");
                                                                                                                            this.$.agregarHijo($$[$0-8])
                                                                                                                            this.$.agregarHijo($$[$0-6])
                                                                                                                            this.$.agregarHijo($$[$0-4])
                                                                                                                            this.$.agregarHijo($$[$0-1])
                                                                                                                        
break;
case 32:

                                                                                                                            this.$ = new nodoArbol("For", "");
                                                                                                                            this.$.agregarHijo($$[$0-10])
                                                                                                                            this.$.agregarHijo($$[$0-8])
                                                                                                                            this.$.agregarHijo(new nodoArbol($$[$0-6]+"++", ""))
                                                                                                                            this.$.agregarHijo($$[$0-1])
                                                                                                                        
break;
case 33:

                                                                                                                            this.$ = new nodoArbol("For", "");
                                                                                                                            this.$.agregarHijo($$[$0-10])
                                                                                                                            this.$.agregarHijo($$[$0-8])
                                                                                                                            this.$.agregarHijo(new nodoArbol($$[$0-6]+"--", ""))
                                                                                                                            this.$.agregarHijo($$[$0-1])
                                                                                                                        
break;
case 34: case 36:

                                                                                    this.$ = new nodoArbol("E", "");
                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-3], "tipo"))
                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-2], "Id"))
                                                                                    this.$.agregarHijo(new nodoArbol("=", "igual"))
                                                                                    this.$.agregarHijo($$[$0])
                                                                                
break;
case 35: case 37:

                                                                                    this.$ = new nodoArbol("E", "");
                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-2], "Id"))
                                                                                    this.$.agregarHijo(new nodoArbol("=", "igual"))
                                                                                    this.$.agregarHijo($$[$0])
                                                                                
break;
case 38:

                                                                                        this.$ = new nodoArbol("Switch", "");
                                                                                        this.$.agregarHijo($$[$0-4])
                                                                                        this.$.agregarHijo($$[$0-1])
                                                                                    
break;
case 39:

                                                                                                    this.$ = new nodoArbol("if", "");
                                                                                                    this.$.agregarHijo($$[$0-5])
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    if($$[$0] != undefined){
                                                                                                        this.$.agregarHijo($$[$0])
                                                                                                    }
                                                                                                
break;
case 40:

                                                                                                    this.$ = new nodoArbol("Else", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 41:

                                                                                                    this.$ = new nodoArbol("Else if", "");
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 43:

                                                                                                    this.$ = new nodoArbol("While", "");
                                                                                                    this.$.agregarHijo($$[$0-4])
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 44:

                                                                                                    this.$ = new nodoArbol("CUERPO", "");
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 46:
   this.$ = new nodoArbol("Casos","");
                                                    this.$.agregarHijo($$[$0-1]);
                                                    this.$.agregarHijo($$[$0]);
                                                
break;
case 47:
   this.$ = new nodoArbol("Caso","");
                                                    this.$.agregarHijo($$[$0]);
                                                
break;
case 48:

                                                    this.$ = new nodoArbol("Case", "");
                                                    this.$.agregarHijo($$[$0-2])
                                                    this.$.agregarHijo($$[$0])
                                                
break;
case 49:

                                                    this.$ = new nodoArbol("Default", "");
                                                    this.$.agregarHijo($$[$0])
                                                
break;
case 50:

                                                                                                    this.$ = new nodoArbol("Identificadores", "");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-2], "id"))
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 51:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-4], "id"))
                                                                                                    this.$.agregarHijo($$[$0-3])
                                                                                                    this.$.agregarHijo(new nodoArbol("=", "Igual"))
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 52:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-3])
                                                                                                    this.$.agregarHijo(new nodoArbol("=", "Igual"))
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 53: case 54:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("=", "Igual"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 55:

                                                                                                    this.$ = new nodoArbol("Incremento", "++");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-3], "Igual"))
                                                                                                
break;
case 56:

                                                                                                    this.$ = new nodoArbol("Decremento", "--");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-3], "Igual"))
                                                                                                
break;
case 57:

                                                                                                    this.$ = new nodoArbol("LLAMADA", "");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-4], "Id"))
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                
break;
case 58:

                                                                                                    this.$ = new nodoArbol("LLAMADA", "");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-3], "Id"))
                                                                                                
break;
case 59:

                                                                                                    this.$ = new nodoArbol("Crear Vector Nuevo", "");
                                                                                                    this.$.agregarHijo(new nodoArbol("Tipo: "+$$[$0-10]+" Id:"+$$[$0-9], "TipoId"))
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                
break;
case 60:

                                                                                                    this.$ = new nodoArbol("Crear Vector Nuevo", "");
                                                                                                    this.$.agregarHijo(new nodoArbol("Tipo: "+$$[$0-8]+" Id:"+$$[$0-7], "TipoId"))
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                
break;
case 61:

                                                                                                    this.$ = new nodoArbol("Modificar Vector", "");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-6], "Id"))
                                                                                                    this.$.agregarHijo($$[$0-4])
                                                                                                    this.$.agregarHijo(new nodoArbol("=", "Igual"))
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 62:

                                                                                                    this.$ = new nodoArbol("Crear Vector", "");
                                                                                                    this.$.agregarHijo(new nodoArbol("Id:"+$$[$0-9], "TipoId"))
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                
break;
case 63:

                                                                                                    this.$ = new nodoArbol("Crear Vector Nuevo", "");
                                                                                                    this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-7], "TipoId"))
                                                                                                    this.$.agregarHijo(new nodoArbol("=", "Igual"))
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                
break;
case 64:

                                                                                                this.$ = new nodoArbol("Crear Lista Nueva", "");
                                                                                                this.$.agregarHijo(new nodoArbol("Tipo: "+$$[$0-9]+" Id:"+$$[$0-7], "TipoId"))
                                                                                            
break;
case 65:

                                                                                                this.$ = new nodoArbol("Agregar", "");
                                                                                                this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-4], "Id"))
                                                                                                this.$.agregarHijo($$[$0-2])
                                                                                            
break;
case 66:

                                                                                                this.$ = new nodoArbol("Modificar", "");
                                                                                                this.$.agregarHijo(new nodoArbol("Id: "+$$[$0-6], "Id"))
                                                                                                this.$.agregarHijo($$[$0-4])
                                                                                                this.$.agregarHijo(new nodoArbol("=", "Igual"))
                                                                                                this.$.agregarHijo($$[$0-2])
                                                                                            
break;
case 67:

                                                                                                this.$ = new nodoArbol("Crear Lista De Caracteres", "");
                                                                                                this.$.agregarHijo(new nodoArbol("Tipo: "+$$[$0-8]+" Id:"+$$[$0-6], "TipoId"))
                                                                                                this.$.agregarHijo(new nodoArbol("=", "Igual"))
                                                                                                this.$.agregarHijo($$[$0-2])
                                                                                            
break;
case 68:

                                                        this.$ = new nodoArbol("Expresiones", "");
                                                        this.$.agregarHijo($$[$0-2])
                                                        this.$.agregarHijo(new nodoArbol(",", "Coma"))
                                                        this.$.agregarHijo($$[$0])
                                                    
break;
case 69:

                                                        this.$= new nodoArbol("E","Expresion")
                                                        this.$.agregarHijo($$[$0])
                                                    
break;
case 70:

                                                                                this.$ = new nodoArbol("ListaExpresiones", "");
                                                                                this.$.agregarHijo($$[$0-2])
                                                                                this.$.agregarHijo(new nodoArbol(",", "Coma"))
                                                                                this.$.agregarHijo($$[$0])
                                                                            
break;
case 71:

                                                                                this.$= new nodoArbol("E","Expresion")
                                                                                this.$.agregarHijo($$[$0])
                                                                            
break;
case 72:
   this.$= new nodoArbol($$[$0],"Id")  
break;
case 73:

                                                                                                        this.$ = new nodoArbol("E", "");
                                                                                                        this.$.agregarHijo($$[$0-2])
                                                                                                        this.$.agregarHijo(new nodoArbol("+", "Suma"))
                                                                                                        this.$.agregarHijo($$[$0])
                                                                                                    
break;
case 74:

                                                                                                        this.$ = new nodoArbol("E", "");
                                                                                                        this.$.agregarHijo($$[$0-2])
                                                                                                        this.$.agregarHijo(new nodoArbol("-", "Resta"))
                                                                                                        this.$.agregarHijo($$[$0])
                                                                                                    
break;
case 75:

                                                                                                        this.$ = new nodoArbol("E", "");
                                                                                                        this.$.agregarHijo($$[$0-2])
                                                                                                        this.$.agregarHijo(new nodoArbol("*", "Multiplicaci√≥n"))
                                                                                                        this.$.agregarHijo($$[$0])
                                                                                                    
break;
case 76:

                                                                                                        this.$ = new nodoArbol("E", "");
                                                                                                        this.$.agregarHijo($$[$0-2])
                                                                                                        this.$.agregarHijo(new nodoArbol("/", "Divisi√≥n"))
                                                                                                        this.$.agregarHijo($$[$0])
                                                                                                    
break;
case 77:

                                                                                                        this.$ = new nodoArbol("E", "");
                                                                                                        this.$.agregarHijo($$[$0-2])
                                                                                                        this.$.agregarHijo(new nodoArbol("%", "Modulo"))
                                                                                                        this.$.agregarHijo($$[$0])
                                                                                                    
break;
case 78:

                                                                                                        this.$ = new nodoArbol("E", "");
                                                                                                        this.$.agregarHijo($$[$0-2])
                                                                                                        this.$.agregarHijo(new nodoArbol("^", "Potencia"))
                                                                                                        this.$.agregarHijo($$[$0])
                                                                                                    
break;
case 79:

                                                                                                        this.$ = new nodoArbol("E", "");
                                                                                                        this.$.agregarHijo($$[$0-1])
                                                                                                    
break;
case 80: case 124:
this.$= new nodoArbol($$[$0],"Entero")
break;
case 81: case 125:
this.$= new nodoArbol($$[$0],"Decimal")
break;
case 82:

                                                                                                        this.$ = new nodoArbol("Vector: "+$$[$0-3]+" Posici√≥n:", "");
                                                                                                        this.$.agregarHijo($$[$0-1])
                                                                                                    
break;
case 83:

                                                                                                        this.$ = new nodoArbol("Valor de Lista: "+$$[$0-3], "");
                                                                                                        this.$.agregarHijo($$[$0-1])
                                                                                                    
break;
case 84:

                                                            this.$ = new nodoArbol("Castear", "");
                                                            this.$.agregarHijo(new nodoArbol($$[$0-3], "Tipo"))
                                                            this.$.agregarHijo($$[$0-1])
                                                        
break;
case 85:

                                                            this.$ = new nodoArbol("Identificadores", "");
                                                            this.$.agregarHijo($$[$0-2])
                                                            this.$.agregarHijo(new nodoArbol(",", "Coma"))
                                                            this.$.agregarHijo($$[$0])
                                                        
break;
case 86:
   
                                                            this.$= new nodoArbol("Identificador","Id")  
                                                            this.$.agregarHijo(new nodoArbol($$[$0], "id"))
                                                        
break;
case 92:

                                                                                                    this.$ = new nodoArbol("E: ", "");
                                                                                                    this.$.agregarHijo(new nodoArbol("-1", "-1"))
                                                                                                    this.$.agregarHijo(new nodoArbol("*", "Multiplicaci√≥n"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 93:

                                                                                                    this.$ = new nodoArbol("!", "");
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 94:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("&&", "And"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 95:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("||", "Or"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 96:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("+", "Suma"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 97:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("-", "Resta"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 98:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("*", "Multiplicaci√≥n"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 99:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("/", "Divisi√≥n"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 100:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("%", "Modulo"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 101:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("^", "Potencia"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 102:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 103:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("==", "Igual"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 104:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("!=", "Diferencia"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 105:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol(">=", "Mayor_Igual"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 106:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("<=", "Menor_Igual"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 107:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol(">", "Mayor"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 108:

                                                                                                    this.$ = new nodoArbol("E", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                    this.$.agregarHijo(new nodoArbol("<", "Menor"))
                                                                                                    this.$.agregarHijo($$[$0])
                                                                                                
break;
case 109:

                                                                                                    this.$ = new nodoArbol("Incremento", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                
break;
case 110:

                                                                                                    this.$ = new nodoArbol("Decremento", "");
                                                                                                    this.$.agregarHijo($$[$0-2])
                                                                                                
break;
case 111:

                                                                                                    this.$ = new nodoArbol("Valor de Vector: "+$$[$0-3], "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 112:

                                                                                                    this.$ = new nodoArbol("Valor de Lista: "+$$[$0-3], "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 113:

                                                                                                    this.$ = new nodoArbol("LLAMADA", "");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-3], "Id"))
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 114:

                                                                                                    this.$ = new nodoArbol("LLAMADA", "");
                                                                                                    this.$.agregarHijo(new nodoArbol($$[$0-2], "Id"))
                                                                                                
break;
case 115:

                                                                                                    this.$ = new nodoArbol("Hacer Min√∫sculas: ", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 116:

                                                                                                    this.$ = new nodoArbol("Hacer May√∫sculas: ", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 117:

                                                                                                    this.$ = new nodoArbol("Obtener Tama√±o: ", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 118:

                                                                                                    this.$ = new nodoArbol("Truncar: ", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 119:

                                                                                                    this.$ = new nodoArbol("Redondear: ", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 120:

                                                                                                    this.$ = new nodoArbol("Tipo de Dato: ", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 121:

                                                                                                    this.$ = new nodoArbol("Convertir en Cadena: ", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 122:

                                                                                                    this.$ = new nodoArbol("Hacer Lista: ", "");
                                                                                                    this.$.agregarHijo($$[$0-1])
                                                                                                
break;
case 123:
this.$= new nodoArbol($$[$0],"Id")
break;
case 126:
this.$= new nodoArbol($$[$0],"True")
break;
case 127:
this.$= new nodoArbol($$[$0],"False")
break;
case 128:

                                                                                                    var cadena = $$[$0].slice(1);
                                                                                                    var guardar = cadena.slice(0,-1);
                                                                                                    this.$= new nodoArbol(guardar,"String");
                                                                                                
break;
case 129:
   
                                                                                                    var cadena = $$[$0].slice(1);
                                                                                                    var guardar = cadena.slice(0,-1);
                                                                                                    this.$= new nodoArbol(guardar,"String");
                                                                                                
break;
case 130:
this.$= new If($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,8:5,9:$V1,16:7,21:$V2,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{1:[3]},{5:[1,14],6:15,7:$V0,8:5,9:$V1,16:7,21:$V2,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,5]),{10:[1,16]},{11:[1,17]},{11:[1,18]},o($V9,[2,87]),o($V9,[2,88]),o($V9,[2,89]),o($V9,[2,90]),o($V9,[2,91]),{1:[2,1]},o($V8,[2,2]),{11:[1,19]},{12:[1,20]},{12:[1,21]},{12:[1,22]},{13:[1,24],16:25,17:23,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{13:[1,27],16:25,17:26,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{11:$Va,12:$Vb,13:[1,28],15:29,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{13:[1,49],22:$Vt},{18:[1,51]},{11:[1,52]},{13:[1,53],22:$Vt},{18:[1,54]},{14:[1,55]},{13:[1,56],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{11:$Va,12:$Vb,15:72,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:73,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:74,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VJ,[2,123],{12:[1,76],57:[1,75]}),{12:[1,77]},{12:[1,78]},{12:[1,79]},{12:[1,80]},{12:[1,81]},{12:[1,82]},{12:[1,83]},{12:[1,84]},{12:[1,85]},o($VJ,[2,124]),o($VJ,[2,125]),o($VJ,[2,126]),o($VJ,[2,127]),o($VJ,[2,128]),o($VJ,[2,129]),{18:[1,86]},{16:25,17:87,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{7:$VK,11:$VL,16:99,19:88,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($VY,[2,13]),{18:[1,115]},{7:$VK,11:$VL,16:99,19:116,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($V8,[2,6]),{14:[1,117]},{11:$Va,12:$Vb,15:118,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:119,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:120,43:[1,121],44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:122,44:[1,123],67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:124,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:125,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:126,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:127,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:128,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:129,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:130,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:131,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:132,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:133,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:134,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VJ,[2,92]),o($VJ,[2,93]),{13:[1,135],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{11:$Va,12:$Vb,15:136,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,13:[1,138],15:137,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:[1,139]},{11:$Va,12:$Vb,15:140,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:141,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:142,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:143,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:144,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:145,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:146,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:147,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{7:$VK,11:$VL,16:99,19:148,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($VY,[2,12]),{7:$VK,11:$VL,16:99,20:[1,149],23:150,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($VZ,[2,15]),o($VZ,[2,16]),o($VZ,[2,17]),o($VZ,[2,18]),o($VZ,[2,19]),{12:[1,151]},{14:[1,152]},{14:[1,153]},{11:$Va,12:$Vb,15:154,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VZ,[2,24]),{11:[1,156],56:155},{22:$V_,45:[1,157]},o([22,45],$V$,{12:[1,161],43:[1,159],44:[1,160],57:[1,162]}),{62:[1,163]},{12:[1,164]},{12:[1,165]},o($VZ,[2,25]),o($VZ,[2,26]),o($VZ,[2,27]),o($VZ,[2,28]),o($VZ,[2,29]),{12:[1,166]},{12:[1,167]},{12:[1,168]},{12:[1,169]},{18:[1,170]},{7:$VK,11:$VL,16:99,19:171,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{7:$VK,11:$VL,16:99,20:[1,172],23:150,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($V8,[2,7]),o([13,14,20,22,54,58,81,82,98],[2,94],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,83:$VE,84:$VF,85:$VG,86:$VH}),o([13,14,20,22,54,58,82,98],[2,95],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,83:$VE,84:$VF,85:$VG,86:$VH}),o($V01,[2,96],{68:$Vy,69:$Vz,70:$VA,71:$VB}),o($VJ,[2,109]),o($V01,[2,97],{68:$Vy,69:$Vz,70:$VA,71:$VB}),o($VJ,[2,110],{15:72,11:$Va,12:$Vb,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs}),o($V11,[2,98],{70:$VA,71:$VB}),o($V11,[2,99],{70:$VA,71:$VB}),o($VJ,[2,100]),o($VJ,[2,101]),o($V21,[2,103],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,85:$VG,86:$VH}),o($V21,[2,104],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,85:$VG,86:$VH}),o($V31,[2,105],{43:$Vu,44:$Vv,68:$Vy,69:$Vz,70:$VA,71:$VB}),o($V31,[2,106],{43:$Vu,44:$Vv,68:$Vy,69:$Vz,70:$VA,71:$VB}),o($V31,[2,107],{43:$Vu,44:$Vv,68:$Vy,69:$Vz,70:$VA,71:$VB}),o($V31,[2,108],{43:$Vu,44:$Vv,68:$Vy,69:$Vz,70:$VA,71:$VB}),{43:$Vu,44:$Vv,54:[1,173],62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($VJ,[2,102]),{43:$Vu,44:$Vv,58:[1,174],62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,175],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($VJ,[2,114]),{22:[1,176]},{13:[1,177],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,178],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,179],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,180],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,181],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,182],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,183],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,184],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{7:$VK,11:$VL,16:99,20:[1,185],23:150,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($V8,[2,9]),o($VZ,[2,14]),{11:$Va,12:$Vb,15:187,29:186,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VZ,[2,21]),o($VZ,[2,22]),{14:[1,188],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{14:[1,189],22:$V_,45:[1,190]},o($V41,$V$,{57:[1,191]}),{11:$Va,12:$V51,15:192,44:$Vc,46:193,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:[1,196],56:195},{43:[1,197]},{44:[1,198]},{11:$Va,12:$Vb,13:[1,200],15:199,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:201,44:$Vc,58:[1,202],67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{16:203,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{11:[1,204]},{11:[1,205]},{11:$Va,12:$Vb,15:206,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:207,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$Va,12:$Vb,15:208,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:[1,211],16:210,42:209,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{7:$VK,11:$VL,16:99,19:213,20:$V61,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,39:212,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{7:$VK,11:$VL,16:99,20:[1,214],23:150,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($V8,[2,11]),{11:$Va,12:$Vb,15:215,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VJ,[2,111]),o($VJ,[2,113]),{11:$Va,12:$Vb,15:216,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VJ,[2,115]),o($VJ,[2,116]),o($VJ,[2,117]),o($VJ,[2,118]),o($VJ,[2,119]),o($VJ,[2,120]),o($VJ,[2,121]),o($VJ,[2,122]),o($V8,[2,8]),{13:[1,217],22:[1,218]},o($VY,[2,71],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI}),o($VZ,[2,23]),o($VZ,[2,50]),{11:$Va,12:$V51,15:219,44:$Vc,46:220,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{58:[1,221]},{14:[1,222],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($VZ,[2,54]),{11:$Va,12:$Vb,15:74,16:223,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($V41,[2,85]),o($V41,$V$),{14:[1,224]},{14:[1,225]},{13:[1,226],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{14:[1,227]},{43:$Vu,44:$Vv,58:[1,228],62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{45:[1,229]},{63:[1,230]},{22:[1,231]},{22:[1,232]},{13:[1,233],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,234],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,235],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{14:[1,236]},{11:[1,237]},{45:$V71},{20:[1,239]},o($V81,[2,44],{24:90,25:91,26:92,27:93,16:99,56:100,33:105,34:106,35:107,36:108,37:109,23:150,7:$VK,11:$VL,28:$VM,30:$VN,31:$VO,32:$VP,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7}),o($V8,[2,10]),{14:[1,240],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{13:[1,241],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{14:[1,242]},{11:$Va,12:$Vb,15:243,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{14:[1,244],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($VZ,[2,53]),{45:[1,245]},o($VZ,[2,52]),{13:[1,246]},o($VZ,[2,55]),o($VZ,[2,56]),{14:[1,247]},o($VZ,[2,58]),{45:[1,248]},{18:[1,250],59:[1,249]},{11:[1,251]},{11:$Va,12:$Vb,15:252,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$V91,12:$Va1,66:253,72:$Vb1,73:$Vc1,74:$Vd1},{18:[1,259]},{18:[1,260]},{18:[1,261]},{11:$Va,12:$Vb,15:262,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{45:[1,263]},{11:$Va,12:$V51,15:264,44:$Vc,46:265,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{40:[1,266]},o($VJ,[2,130]),o($VJ,[2,112]),o($VZ,[2,20]),o($VY,[2,70],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI}),o($VZ,[2,51]),{18:[1,268],59:[1,267]},{11:$Va,12:$Vb,15:269,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($VZ,[2,57]),{11:$Va,12:$Vb,15:270,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{16:271,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{11:$Va,12:$Vb,15:273,44:$Vc,60:272,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{45:[1,274]},{13:[1,275],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{22:[1,276],43:$Ve1,44:$Vf1,68:$Vg1,69:$Vh1,70:$Vi1,71:$Vj1},o($Vk1,[2,72],{57:[1,283]}),{11:$V91,12:$Va1,66:284,72:$Vb1,73:$Vc1,74:$Vd1},o($Vk1,[2,80]),o($Vk1,[2,81]),{12:[1,285]},{7:$VK,11:$VL,16:99,19:213,20:$V61,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,39:286,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{48:287,52:288,53:$Vl1,55:$Vm1},{7:$VK,11:$VL,16:99,19:213,20:$V61,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,39:291,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{14:[1,292],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{11:$Va,12:$V51,15:293,44:$Vc,46:294,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},o($Vn1,[2,35],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI}),o($Vn1,[2,37]),{12:[1,295]},{16:296,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{11:$Va,12:$Vb,15:273,44:$Vc,60:297,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{14:[1,298],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{14:[1,299],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{57:[1,300]},{20:[1,301],22:$Vo1},o($Vp1,[2,69],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI}),{59:[1,303],67:[1,304]},{14:[1,305]},{11:$Va,12:$Vb,15:306,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{11:$V91,12:$Va1,66:307,72:$Vb1,73:$Vc1,74:$Vd1},{11:$V91,12:$Va1,66:308,72:$Vb1,73:$Vc1,74:$Vd1},{11:$V91,12:$Va1,66:309,72:$Vb1,73:$Vc1,74:$Vd1},{11:$V91,12:$Va1,66:310,72:$Vb1,73:$Vc1,74:$Vd1},{11:$V91,12:$Va1,66:311,72:$Vb1,73:$Vc1,74:$Vd1},{11:$V91,12:$Va1,66:312,72:$Vb1,73:$Vc1,74:$Vd1},{11:$V91,12:$Va1,66:313,72:$Vb1,73:$Vc1,74:$Vd1},{13:[1,314],43:$Ve1,44:$Vf1,68:$Vg1,69:$Vh1,70:$Vi1,71:$Vj1},{11:[1,315]},{20:[1,316]},{20:[1,317],52:318,53:$Vl1,55:$Vm1},o($V81,[2,47]),{11:$Va,12:$Vb,15:319,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{54:[1,320]},{20:[1,321]},{11:[1,323],16:210,42:322,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($Vn1,[2,34],{43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI}),o($Vn1,[2,36]),{11:$Va,12:$Vb,15:324,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{57:[1,325]},{20:[1,326],22:$Vo1},o([7,11,13,14,20,28,30,31,32,38,40,41,47,49,53,55,61,64,65,75,76,77,78,79],[2,84]),o($VZ,[2,61]),{11:$Va,12:$Vb,15:327,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{14:[1,328]},{11:$Va,12:$Vb,15:273,44:$Vc,60:329,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{61:[1,330]},{12:[1,331]},o($VZ,[2,65]),{13:[1,332],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($Vq1,[2,73],{68:$Vg1,69:$Vh1,70:$Vi1,71:$Vj1}),o($Vq1,[2,74],{68:$Vg1,69:$Vh1,70:$Vi1,71:$Vj1}),o($Vr1,[2,75],{70:$Vi1,71:$Vj1}),o($Vr1,[2,76],{70:$Vi1,71:$Vj1}),o($Vk1,[2,77]),o($Vk1,[2,78]),{43:$Ve1,44:$Vf1,58:[1,333],68:$Vg1,69:$Vh1,70:$Vi1,71:$Vj1},o($Vk1,[2,79]),{22:[1,334]},o($VZ,[2,42],{50:335,51:[1,336]}),o($VZ,[2,38]),o($V81,[2,46]),{43:$Vu,44:$Vv,54:[1,337],62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($V81,$V61,{23:89,24:90,25:91,26:92,27:93,16:99,56:100,33:105,34:106,35:107,36:108,37:109,19:213,39:338,7:$VK,11:$VL,28:$VM,30:$VN,31:$VO,32:$VP,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7}),o($VZ,[2,43]),{13:[1,339]},{43:[1,340],44:[1,341],45:$V71},{13:[1,342],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},{11:$Va,12:$Vb,15:343,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{14:[1,344]},{43:$Vu,44:$Vv,58:[1,345],62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($VZ,[2,63]),o($Vp1,[2,68]),{62:[1,346]},{11:$Va,12:$Vb,15:347,44:$Vc,67:$Vd,72:$Ve,73:$Vf,74:$Vg,80:$Vh,87:$Vi,88:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo,94:$Vp,95:$Vq,96:$Vr,97:$Vs},{14:[1,348]},o($Vk1,[2,82]),{11:$V91,12:$Va1,66:349,72:$Vb1,73:$Vc1,74:$Vd1},o($VZ,[2,39]),{18:[1,350],33:351,49:$VU},o($V81,$V61,{23:89,24:90,25:91,26:92,27:93,16:99,56:100,33:105,34:106,35:107,36:108,37:109,19:213,39:352,7:$VK,11:$VL,28:$VM,30:$VN,31:$VO,32:$VP,38:$VQ,40:$VR,41:$VS,47:$VT,49:$VU,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7}),o($V81,[2,49]),{18:[1,353]},{43:[1,354]},{44:[1,355]},{14:[1,356]},{43:$Vu,44:$Vv,58:[1,357],62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($VZ,[2,60]),{14:[1,358]},{16:359,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{13:[1,360],43:$Vu,44:$Vv,62:$Vw,63:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,98:$VI},o($VZ,[2,66]),{13:[1,361],43:$Ve1,44:$Vf1,68:$Vg1,69:$Vh1,70:$Vi1,71:$Vj1},{7:$VK,11:$VL,16:99,19:213,20:$V61,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,39:362,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($VZ,[2,41]),o($V81,[2,48]),{7:$VK,11:$VL,16:99,19:213,20:$V61,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,39:363,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{13:[1,364]},{13:[1,365]},o($VZ,[2,30]),{14:[1,366]},o($VZ,[2,62]),{63:[1,367]},{14:[1,368]},o($Vk1,[2,83]),{20:[1,369]},{20:[1,370]},{18:[1,371]},{18:[1,372]},o($VZ,[2,59]),{14:[1,373]},o($VZ,[2,67]),o($VZ,[2,40]),o($VZ,[2,31]),{7:$VK,11:$VL,16:99,19:213,20:$V61,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,39:374,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},{7:$VK,11:$VL,16:99,19:213,20:$V61,23:89,24:90,25:91,26:92,27:93,28:$VM,30:$VN,31:$VO,32:$VP,33:105,34:106,35:107,36:108,37:109,38:$VQ,39:375,40:$VR,41:$VS,47:$VT,49:$VU,56:100,61:$VV,64:$VW,65:$VX,75:$V3,76:$V4,77:$V5,78:$V6,79:$V7},o($VZ,[2,64]),{20:[1,376]},{20:[1,377]},o($VZ,[2,32]),o($VZ,[2,33])],
defaultActions: {14:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {nodoArbol} = require('../dist/Instrucciones/nodoArbol.js')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:return "COMENTARIO";
break;
case 2:return "COMENTARIO"; 
break;
case 3:return "FRASE";
break;
case 4:return "CARACTER";
break;
case 5:return 94;
break;
case 6:return 95;
break;
case 7:return "INT";
break;
case 8:return "DOUBLE";
break;
case 9:return "BOOLEAN";
break;
case 10:return "CHAR";
break;
case 11:return "STRING";
break;
case 12:return "NUEVO"
break;
case 13:return "SALTO";
break;
case 14:return "BARRAI";
break;
case 15:return "COMILLAD";
break;
case 16:return "TAB";
break;
case 17:return "COMILLAS";
break;
case 18:return "LISTA";
break;
case 19:return "AGREGAR";
break;
case 20:return "SACAR";
break;
case 21:return "MODIFICAR";
break;
case 22:return "IF";
break;
case 23:return "SWITCH";
break;
case 24:return "ELSE";
break;
case 25:return "CASE";
break;
case 26:return "DEFAULT";
break;
case 27:return "WHILE";
break;
case 28:return "FOR";
break;
case 29:return "DO";
break;
case 30:return "BREAK";
break;
case 31:return "CONTINUE";
break;
case 32:return "RETURN";
break;
case 33:return "VOID";
break;
case 34:return "IMPRIMIR";
break;
case 35:return "MINUSCULAS";
break;
case 36:return "MAYUSCULAS";
break;
case 37:return "LENGTH";
break;
case 38:return "TRUNCATE";
break;
case 39:return "ROUND";
break;
case 40:return "TYPEOF";
break;
case 41:return "TOSTRING";
break;
case 42:return "TOCHARARRAY";
break;
case 43:return "START";
break;
case 44:return "WITH";
break;
case 45:return 73;
break;
case 46:return 72;
break;
case 47:return "ID";
break;
case 48:return 12;
break;
case 49:return 13;
break;
case 50:return 18
break;
case 51:return 20
break;
case 52:return 57
break;
case 53:return 58
break;
case 54:return 98;
break;
case 55:return "DPUNTOS";
break;
case 56:return "PCOMA";
break;
case 57:return 83;
break;
case 58:return 86;
break;
case 59:return 62;
break;
case 60:return 85;                     
break;
case 61:return 63;
break;
case 62:return 84;
break;
case 63:return 82;
break;
case 64:return 81;
break;
case 65:return 80;
break;
case 66:return 22;
break;
case 67:return 43;
break;
case 68:return 44;
break;
case 69:return 68;
break;
case 70:return 69;
break;
case 71:return 71;
break;
case 72:return 45;
break;
case 73:return 70;
break;
case 74:return 5;
break;
case 75:console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:[\"]([^\"\n]|(\\"))*[\"])/i,/^(?:[\']([^\"\n]|(\\"))[\'])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:new\b)/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:If\b)/i,/^(?:switch\b)/i,/^(?:Else\b)/i,/^(?:Case\b)/i,/^(?:Default\b)/i,/^(?:While\b)/i,/^(?:For\b)/i,/^(?:Do\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:WriteLine\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:Start\b)/i,/^(?:With\b)/i,/^(?:[0-9]+(\.)[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö]+["_"0-9A-Za-z√°√©√≠√≥√∫√Å√â√ç√ì√ö]*)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:==)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:%)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}